name: Build OS Image

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - .dockerignore
      - .flake8
      - .github/workflows/docs.yml
      - .gitignore
      - dev-docker.sh
      - docker/**
      - docs/**
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build image
    steps:
      -
        name: Remove unnecessary files
        uses: jlumbroso/free-disk-space@main
        with:  # Set more of these to true if more disk space needed (speed tradeoff)
          tool-cache: false
          docker-images: false
          swap-storage: false
          large-packages: false
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Setup nodejs
        if: github.ref_type == 'tag'
        uses: actions/setup-node@v4
        with:
          node-version: 20
      -
        name: Prepare for build
        id: setup
        shell: bash
        run: |
          pushd image/stage-vintage-pi-tv/04-install-vintage-pi-tv/files
          mkdir vintage-pi-tv
          sudo mount -vo bind ../../../.. vintage-pi-tv
          popd

          if [ "${GITHUB_REF_TYPE}" = 'tag' ]; then
            IMG_NAME_SUFFIX="${GITHUB_REF_NAME}"
            echo "short-version=${GITHUB_REF_NAME:1}" | tee -a "${GITHUB_OUTPUT}"
            PI_GEN_RELEASE_EXTRA="${GITHUB_REF_NAME}"
          else
            SHORT_SHA=${GITHUB_SHA:0:8}
            IMG_NAME_SUFFIX="preview-${SHORT_SHA}"
            echo "short-sha=${SHORT_SHA}" | tee -a "${GITHUB_OUTPUT}"
            PI_GEN_RELEASE_EXTRA="preview build ${SHORT_SHA}"
          fi
          source image/config
          echo "disable-first-boot-user-rename=${DISABLE_FIRST_BOOT_USER_RENAME}" | tee -a "${GITHUB_OUTPUT}"
          echo "hostname=${TARGET_HOSTNAME}" | tee -a "${GITHUB_OUTPUT}"
          echo "image-name=${IMG_NAME}_${IMG_NAME_SUFFIX}" | tee -a "${GITHUB_OUTPUT}"
          echo "keyboard-keymap=${KEYBOARD_KEYMAP}" | tee -a "${GITHUB_OUTPUT}"
          echo "keyboard-layout=${KEYBOARD_LAYOUT}" | tee -a "${GITHUB_OUTPUT}"
          echo "locale=${LOCALE_DEFAULT}" | tee -a "${GITHUB_OUTPUT}"
          echo "password=${FIRST_USER_PASS}" | tee -a "${GITHUB_OUTPUT}"
          echo "pi-gen-release=${PI_GEN_RELEASE} (${PI_GEN_RELEASE_EXTRA})" | tee -a "${GITHUB_OUTPUT}"
          echo "timezone=${TIMEZONE_DEFAULT}" | tee -a "${GITHUB_OUTPUT}"
          echo "username=${FIRST_USER_NAME}" | tee -a "${GITHUB_OUTPUT}"
          echo "wpa-country=${WPA_COUNTRY}" | tee -a "${GITHUB_OUTPUT}"

          if [ "${GITHUB_REF_TYPE}" = 'tag' ]; then
            echo "Building web app for tagged release"
            cd web
            npm install
            npm run build
          fi
      -
        name: Build image
        uses: usimd/pi-gen-action@v1
        id: build
        with:
          compression: none
          disable-first-boot-user-rename: ${{ steps.setup.outputs.disable-first-boot-user-rename }}
          docker-opts: '--env GITHUB_REF_TYPE=${{ github.ref_type }} --env GITHUB_REF_NAME=${{ github.ref_name }} --env GITHUB_REPOSITORY=${{ github.repository }}'
          hostname: ${{ steps.setup.outputs.hostname }}
          image-name: ${{ steps.setup.outputs.image-name }}
          keyboard-keymap: ${{ steps.setup.outputs.keyboard-keymap }}
          keyboard-layout: ${{ steps.setup.outputs.keyboard-layout }}
          locale: ${{ steps.setup.outputs.locale }}
          password: ${{ steps.setup.outputs.password }}
          pi-gen-release: ${{ steps.setup.outputs.pi-gen-release }}
          pi-gen-version: arm64
          release: bookworm
          stage-list: "stage0 stage1 stage2 ${{ github.ref_type != 'tag' && './image/stage-nodejs ' || '' }}./image/stage-vintage-pi-tv"
          timezone: ${{ steps.setup.outputs.timezone }}
          username: ${{ steps.setup.outputs.username }}
          verbose-output: true
          wpa-country: ${{ steps.setup.outputs.wpa-country }}
      -
        name: Finalize build
        id: finalize
        shell: bash
        run: |
          IMAGE_PATH="$(basename "${{ steps.build.outputs.image-path }}")"
          mv -v "${{ steps.build.outputs.image-path }}" "${IMAGE_PATH}"
          echo 'Compressing image. This may take several minutes.'
          xz -v -T0 -9e "${IMAGE_PATH}"
          FINAL_PATH="${IMAGE_PATH}.xz"
          SHA256SUM="$(sha256sum "${FINAL_PATH}" | awk '{ print $1 }')"
          echo "${SHA256SUM}  ${FINAL_PATH}" > "${FINAL_PATH}.sha256sum"
          echo "image-sha256sum=${SHA256SUM}" | tee -a "${GITHUB_OUTPUT}"
          echo "final-path=${FINAL_PATH}" | tee -a "${GITHUB_OUTPUT}"
      -
        name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vintage-pi-tv-build
          path: |
            ${{ steps.finalize.outputs.final-path }}
            ${{ steps.finalize.outputs.final-path }}.sha256sum
          if-no-files-found: error
          retention-days: 2
          compression-level: 0  # Already compressed with xz above
      -
        name: Check for new commits
        id: check-commits
        shell: bash
        if: github.ref_type != 'tag' && github.ref_name == 'main'
        run: |
          git fetch origin
          if [ "$(git log HEAD..origin/main --oneline)" ]; then
            echo "has-new=yes" | tee -a "${GITHUB_OUTPUT}"
          else
            echo "has-new=no" | tee -a "${GITHUB_OUTPUT}"
          fi
      -
        name: Remove old preview release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: github.ref_type != 'tag' && github.ref_name == 'main' && steps.check-commits.outputs.has-new == 'no'
        with:
          delete_release: true
          tag_name: preview-build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Wait for preview release to delete
        shell: bash
        if: github.ref_type != 'tag' && github.ref_name == 'main' && steps.check-commits.outputs.has-new == 'no'
        run: sleep 15s
      -
        name: Tag and upload release
        uses: ncipollo/release-action@v1
        if: github.ref_type == 'tag' || (github.ref_name == 'main' && steps.check-commits.outputs.has-new == 'no')
        with:
          artifacts: ${{ steps.finalize.outputs.final-path }},${{ steps.finalize.outputs.final-path }}.sha256sum
          name: ${{ github.ref_type == 'tag' && format('Version {0}', steps.setup.outputs.short-version) || format('Preview Build {0}', steps.setup.outputs.short-sha) }}
          tag: ${{ github.ref_type == 'tag' && github.ref_name || 'preview-build' }}
          prerelease: ${{ github.ref_type != 'tag' }}
          body: |-
            Vintage Pi TV ${{ github.ref_type == 'tag' && format('Release v{0}', steps.setup.outputs.short-version) || format('Preview Build {0}', steps.setup.outputs.short-sha) }}

            Image filename: `${{ steps.finalize.outputs.final-path }}`
            SHA256SUM: `${{ steps.finalize.outputs.image-sha256sum }}`

            ${{ github.ref_type != 'tag' &&  '_**This development preview build may not be safe; use it at your own risk.**_' || ''}}
